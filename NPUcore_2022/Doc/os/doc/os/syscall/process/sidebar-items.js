initSidebarItems({"enum":[["Resource",""],["SyslogAction",""]],"fn":[["sys_brk",""],["sys_clock_get_time",""],["sys_clone","Explanation of Parameters"],["sys_execve",""],["sys_exit",""],["sys_get_time",""],["sys_get_time_of_day",""],["sys_getegid",""],["sys_geteuid",""],["sys_getgid",""],["sys_getpgid",""],["sys_getpid",""],["sys_getppid",""],["sys_getrusage",""],["sys_gettid",""],["sys_getuid",""],["sys_kill",""],["sys_mmap",""],["sys_mprotect",""],["sys_munmap",""],["sys_nanosleep",""],["sys_prlimit","It can be used to both set and get the resource limits of an arbitrary process."],["sys_sbrk",""],["sys_set_tid_address","set pointer to thread ID This feature is currently NOT supported and is implemented as a stub, since threads are not supported."],["sys_setitimer",""],["sys_setpgid",""],["sys_sigaction",""],["sys_sigprocmask","Note: code translation should be done in syscall rather than the call handler as the handler may be reused by kernel code which use kernel structs"],["sys_sigreturn",""],["sys_sysinfo",""],["sys_syslog",""],["sys_times","Get process times"],["sys_uname",""],["sys_wait4","If there is not a child process whose pid is same as given, return -1. Else if there is a child process but it is still running, return -2."],["sys_yield",""]],"struct":[["CloneFlags",""],["RLimit",""],["Sysinfo",""],["UTSName",""],["WaitOption",""]]});