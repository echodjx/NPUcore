initSidebarItems({"fn":[["copy_from_user","Copy `*src: T` to kernel space. `src` is a pointer in user space, `dst` is a pointer in kernel space."],["copy_from_user_array","Copy array `*src: [T;len]` to kernel space. `src` is a pointer in user space, `dst` is a pointer in kernel space."],["copy_to_user","Copy `*src: T` to user space. `src` is a pointer in kernel space, `dst` is a pointer in user space."],["copy_to_user_array","Copy array `*src: [T;len]` to user space. `src` is a pointer in kernel space, `dst` is a pointer in user space."],["copy_to_user_string","Automatically add `'\\0'` in the end, so total written length is `src.len() + 1` (with trailing `'\\0'`)."],["translated_byte_buffer",""],["translated_byte_buffer_append_to_existed_vec","if `existed_vec == None`, a empty `Vec` will be created."],["translated_ref","Translate the user space pointer `ptr` into a reference in user space through page table `token`"],["translated_refmut","Translate the user space pointer `ptr` into a mutable reference in user space through page table `token`"],["translated_str","Load a string from other address spaces into kernel space without an end `\\0`."]],"struct":[["PTEFlags","Page Table Entry flags"],["PageTable",""],["PageTableEntry","Page Table Entry"],["UserBuffer","A buffer in user space. Kernel space code may use this struct to copy to/ read from user space. This struct is meaningless in case that the kernel page is present in the user side MemorySet."],["UserBufferIterator","Iterator to a UserBuffer returning u8"]]});