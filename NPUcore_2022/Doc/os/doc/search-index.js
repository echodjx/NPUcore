var searchIndex = JSON.parse('{\
"os":{"doc":"","t":[0,5,14,0,0,0,14,0,0,0,14,14,14,14,14,5,0,14,14,0,0,0,0,6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,3,11,11,11,11,11,11,11,11,11,11,5,11,5,5,11,11,11,11,11,11,11,0,0,3,12,5,11,11,11,11,11,0,11,11,11,0,12,13,13,12,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,11,11,13,12,12,13,12,12,12,12,12,12,12,12,12,12,11,4,12,12,12,12,12,12,12,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,3,3,17,17,17,17,17,17,12,12,17,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,17,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,0,3,12,11,11,11,11,11,0,11,0,11,12,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,13,13,3,4,8,13,3,4,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,3,13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,3,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,0,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,10,11,10,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,12,12,17,3,14,3,14,4,3,3,3,3,3,3,13,13,12,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,13,13,13,18,18,18,13,18,3,18,18,13,13,13,13,13,13,13,13,13,13,13,13,13,18,3,3,4,3,3,3,18,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,13,3,4,3,13,6,3,3,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,5,11,11,11,12,5,11,5,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,13,13,13,3,3,17,4,11,11,12,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,12,11,11,11,5,11,11,11,11,12,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,3,18,18,18,18,18,18,18,18,18,18,18,18,18,3,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,11,11,5,0,0,0,0,0,0,5,0,0,12,12,12,12,3,3,3,3,8,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,3,17,17,17,17,12,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,17,3,17,17,3,3,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,5,11,11,5,11,3,8,6,3,3,12,10,11,11,11,11,11,11,11,12,10,11,11,11,12,11,5,5,5,11,5,11,11,11,11,5,11,11,11,10,11,11,12,12,11,11,11,11,11,11,11,11,11,5,11,7,7,5,5,5,13,13,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,3,3,3,3,4,3,18,18,18,18,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,5,5,5,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,11,11,11,12,11,11,12,5,5,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,11,11,11,11,5,5,5,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,18,18,18,3,3,3,18,18,3,3,18,18,18,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,5,5,5,5,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,5,5,5,5,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,5,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,13,18,18,17,18,18,18,18,18,13,4,13,13,18,3,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,3,13,13,13,13,18,18,18,18,13,13,13,13,13,13,13,13,13,13,13,3,18,3,3,3,18,18,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,4,13,13,13,13,3,4,3,18,18,18,18,18,3,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,11,11,11,11,12,12,11,11,12,12,11,11,12,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,4,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,5,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,0,11,12,5,11,11,11,11,11,11,11,11,0,11,12,12,12,0,0,0,5,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,12,12,11,11,11,3,3,3,12,11,11,5,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,12,11,12,11,11,11,11,5,11,12,5,11,11,11,11,11,11,11,11,11,11,5,12,3,3,3,3,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,12,11,11,11,11,11,11,11,12,5,5,5,11,11,11,11,11,12,12,11,11,11,11,11,5,5,11,5,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,13,13,13,18,18,3,3,4,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,5,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,6,13,3,3,13,13,3,3,3,4,13,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,5,11,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,17,17,17,17,17,3,3,3,3,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,11,11,11,11,11,11,11,12,12,11,11,11,11,11,5,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,12,12,5,5,5,0,5,5,5,5,5,5,5,3,11,11,11,11,11,11,11,11,12,12,12,11,12,11,12,11,11,11,12],"n":["board","clear_bss","color_text","config","console","drivers","errno_exit","fs","lang_items","mm","move_ptr_to_opt","print","println","ptr_to_opt_ref","ptr_to_opt_ref_mut","rust_main","sbi","set_errno","show_frame_consumption","syscall","task","timer","trap","BlockDeviceImpl","CLOCK_FREQ","MMIO","VIRT_PLIC","VIRT_UART","KERNEL_HEAP_SIZE","KERNEL_STACK_SIZE","MEMORY_END","MEMORY_START","MMAP_BASE","MMAP_SIZE","PAGE_SIZE","PAGE_SIZE_BITS","SIGNAL_TRAMPOLINE","TRAMPOLINE","TRAP_CONTEXT","USER_HEAP_SIZE","USER_STACK_BOTTOM","USER_STACK_SIZE","USER_STACK_TOP","KernelOutput","Logger","borrow","borrow","borrow_mut","borrow_mut","enabled","flush","from","from","into","into","level_to_color_code","log","log_init","print","try_from","try_from","try_into","try_into","type_id","type_id","write_str","block","serial","BLOCK_DEVICE","__private_field","block_device_test","borrow","borrow_mut","deref","from","into","sdcard","try_from","try_into","type_id","virtio_blk","0","ACMD23","ACMD41","CID_CRC","CMD","CMD0","CMD10","CMD12","CMD16","CMD17","CMD18","CMD24","CMD25","CMD55","CMD58","CMD59","CMD8","CMD9","CMDFailed","CSDStruct","CSD_CRC","CS_HIGH","CS_LOW","CannotGetCardInfo","CardBlockSize","CardCapacity","CardCapacityStatusNotSet","CardComdClasses","ContentProtectAppli","CopyFlag","DSRImpl","DeviceSize","ECC","EraseGrMul","EraseGrSize","FileFormat","FileFormatGroup","HIGH_SPEED_ENABLE","InitError","ManDeflECC","ManufactDate","ManufacturerID","MaxBusClkFrec","MaxWrBlockLen","NSAC","OEM_AppliID","PERIPHERALS","PartBlockRead","PermWrProtect","ProdName1","ProdName2","ProdRev","ProdSN","RdBlockLen","RdBlockMisalign","Reserved1","Reserved1","Reserved2","Reserved2","Reserved3","Reserved4","SDCard","SDCardCID","SDCardCSD","SDCardInfo","SDCardWrapper","SD_CS","SD_CS_GPIONUM","SD_START_DATA_MULTIPLE_BLOCK_READ","SD_START_DATA_MULTIPLE_BLOCK_WRITE","SD_START_DATA_SINGLE_BLOCK_READ","SD_START_DATA_SINGLE_BLOCK_WRITE","SD_cid","SD_csd","SEC_LEN","SysSpecVersion","TAAC","TempWrProtect","WrBlockMisalign","WrProtectGrEnable","WrProtectGrSize","WrSpeedFact","WriteBlockPaPartial","__private_field","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cs_gpionum","deref","end_cmd","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_cardinfo","get_cidregister","get_csdregister","get_dataresponse","get_response","init","init_sdcard","into","into","into","into","into","into","into","into","io_init","lowlevel_init","new","new","read_block","read_data","read_sector","send_cmd","spi","spi_cs","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_block","write_data","write_sector","0","0","1","0","QUEUE_FRAMES","VIRTIO0","VirtIOBlock","__private_field","borrow","borrow","borrow_mut","borrow_mut","deref","from","from","into","into","new","read_block","try_from","try_from","try_into","try_into","type_id","type_id","virtio_dma_alloc","virtio_dma_dealloc","virtio_phys_to_virt","virtio_virt_to_phys","write_block","ns16550a","Ns16550a","base","borrow","borrow_mut","flush","from","into","masks","new","offsets","read","shift","try_from","try_into","type_id","write","DR","THRE","DLH","DLL","FCR","IER","LCR","LSR","MCR","RBR","THR","Abstract","Directory","Dirent","DiskInodeType","File","File","FileDescriptor","FileLike","NAME_LIMIT","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECT","O_DIRECTORY","O_DSYNC","O_EXCL","O_LARGEFILE","O_NOATIME","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_PATH","O_RDONLY","O_RDWR","O_RSYNC","O_SYNC","O_TMPFILE","O_TRUNC","O_WRONLY","OpenFlags","Regular","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","Stat","StatMode","__pad","__pad2","__unused","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache_mgr","cloexec","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","complement","complement","contains","contains","d_ino","d_name","d_off","d_reclen","d_type","dev","difference","difference","empty","empty","eq","eq","eq","extend","extend","file","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","get_cloexec","get_ino","hang_up","hash","hash","inode","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","ioctl","is_all","is_all","is_empty","is_empty","kread","kwrite","ne","ne","new","new","new","not","not","partial_cmp","partial_cmp","pipe","poll","r_ready","read","read_write","readable","remove","remove","set","set","set_cloexec","st_atime","st_blksize","st_blocks","st_ctime","st_dev","st_gid","st_ino","st_mode","st_mtime","st_nlink","st_rdev","st_size","st_uid","stat","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","w_ready","writable","write","0","0","BLOCK_CACHE_LAYOUT","BlockCache","BlockCacheImpl","BlockCacheManager","CacheMgrImpl","CacheMode","DATA_BLOCK_CACHE_MANAGER","DataBlockCacheWrapper","DataCacheMgrWrapper","INFO_CACHE_MANAGER","InfoBlockCacheWrapper","InfoCacheMgrWrapper","READ","WRITE","__private_field","__private_field","addr_of_offset","block_device","block_id","block_id","block_id","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","clone","clone_into","deref","deref","drop","drop_all","empty","empty","eq","fmt","from","from","from","from","from","from","from","from","from","get_block_cache","get_block_cache","get_block_cache","get_block_cache","get_info_cache","get_mut","get_ref","into","into","into","into","into","into","into","into","into","limit","map","modified","modify","modify","modify","new","new","new","new","new","new","read","read","read","read_block_cache","start_sec","sync","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get_block_cache","try_get_block_cache","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_to_dev","pseudo","tty","Null","Zero","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","read","read","readable","readable","try_from","try_from","try_into","try_into","type_id","type_id","writable","writable","write","write","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","EXTPROC","FIOCLEX","FIONBIO","FIONCLEX","FLUSHO","ICANON","IEXTEN","ILLEAGAL","ISIG","LocalModes","NOFLSH","PENDIN","RTC_RD_TIME","TCGETA","TCGETS","TCSETA","TCSETAF","TCSETAW","TCSETS","TCSETSF","TCSETSW","TIOCGPGRP","TIOCGWINSZ","TIOCSPGRP","TIOCSWINSZ","TOSTOP","TTY","Teletype","TeletypeCommand","TeletypeInner","Termios","WinSize","XCASE","__private_field","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cc","cflag","clone","clone","clone","clone_into","clone_into","clone_into","cmp","complement","contains","default","default","default","default","deref","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","foreground_pgid","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_primitive","hash","iflag","inner","insert","intersection","intersects","into","into","into","into","into","into","into","ioctl","is_all","is_empty","ispeed","kwrite","last_char","lflag","line","ne","not","oflag","ospeed","partial_cmp","r_ready","read","readable","remove","set","sub","sub_assign","symmetric_difference","termios","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_primitive","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","w_ready","winsize","writable","write","ws_col","ws_row","xpixel","ypixel","Directory","DirectoryTreeNode","DiskInodeType","FILE_SYSTEM","File","InodeImpl","OSInode","ROOT","__private_field","__private_field","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","clear","delete","deref","deref","from","from","from","from","get_dirent","get_head_cluster","get_ino","inner","inode","into","into","into","into","is_dir","kread","kwrite","list_apps","lseek","new","new","offset","open","open_by_relative_path","open_root_inode","read","readable","readable","set_offset","set_timestamp","size","stat","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","writable","writable","write","EMPTY","FULL","NORMAL","Pipe","PipeRingBuffer","RING_BUFFER_SIZE","RingBufferStatus","all_read_ends_closed","all_write_ends_closed","arr","available_read","available_write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","clone","clone_into","count","eq","from","from","from","hang_up","head","into","into","into","make_pipe","new","r_ready","read","read_byte","read_end","read_end_with_buffer","readable","readable","set_read_end","set_write_end","status","tail","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","w_ready","writable","writable","write","write_byte","write_end","write_end_with_buffer","FdSet","POLLERR","POLLHUP","POLLIN","POLLMSG","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDHUP","POLLRDNORM","POLLREMOVE","POLLWRBAND","POLLWRNORM","PollEvent","PollFd","all","as_bytes","as_bytes_mut","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clr","clr_all","cmp","complement","contains","difference","empty","empty","eq","events","extend","fd","fd_elt","fd_mask","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_fd_vec","hash","insert","intersection","intersects","into","into","into","is_all","is_empty","is_set","ne","not","partial_cmp","poll","ppoll","pselect","remove","revents","set","set","set_num","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","Bytes","as_bytes","as_bytes_mut","panic","address","block_cache_block","block_cache_page","elf_cache","frame_allocator","heap_allocator","init","memory_set","page_table","0","0","0","0","PhysAddr","PhysPageNum","SimpleRange","SimpleRangeIterator","StepByOne","VPNRange","VirtAddr","VirtPageNum","aligned","aligned","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","current","end","eq","eq","eq","eq","floor","floor","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_bytes_array","get_end","get_mut","get_mut","get_pte_array","get_ref","get_start","indexes","into","into","into","into","into","into","into_iter","into_iter","l","ne","ne","ne","ne","new","new","next","page_offset","page_offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","step","step","step","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","BUFFER_SIZE","BlockCacheManager","BufferCache","CACHEPOOLPAGE","CACHEPOOLSIZE","PAGE_BUFFERS","PRIORITY_UPPERBOUND","_hold","alloc_buffer_cache","block_id","borrow","borrow","borrow_mut","borrow_mut","buffer","cache_pool","from","from","get_block_cache","into","into","modify","new","new","oom","priority","read","read_block","try_from","try_from","try_get_block_cache","try_get_block_cache","try_into","try_into","type_id","type_id","BUFFER_SIZE","PAGECACHE_MANAGER","PAGE_BUFFERS","PRIORITY_UPPERBOUND","PageCache","PageCacheManager","__private_field","block_ids","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache_pool","deref","drop","from","from","from","get_block_cache","get_ppn","get_pte","into","into","into","modify","new","new","oom","page_ptr","priority","read","read_in","tracker","try_from","try_from","try_from","try_get_block_cache","try_into","try_into","try_into","type_id","type_id","type_id","write_back","ELF_CACHE","__private_field","borrow","borrow_mut","deref","from","into","push_elf_area","try_from","try_into","try_remove_elf","type_id","FRAME_ALLOCATOR","FrameAllocator","FrameAllocatorImpl","FrameTracker","StackFrameAllocator","__private_field","alloc","alloc","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","current","dealloc","dealloc","deref","drop","end","fmt","frame_alloc","frame_allocator_test","frame_dealloc","free_space_size","free_space_size_rdlock","from","from","from","init","init_frame_allocator","into","into","into","new","new","new","ppn","recycled","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unallocated_frames","unallocated_frames","HEAP_ALLOCATOR","HEAP_SPACE","handle_alloc_error","heap_test","init_heap","Framed","Identical","KERNEL_SPACE","MAP_ANONYMOUS","MAP_DENYWRITE","MAP_EXECUTABLE","MAP_FILE","MAP_FIXED","MAP_FIXED_NOREPLACE","MAP_GROWSDOWN","MAP_HUGETLB","MAP_LOCKED","MAP_NONBLOCK","MAP_NORESERVE","MAP_POPULATE","MAP_PRIVATE","MAP_SHARED","MAP_SHARED_VALIDATE","MAP_STACK","MAP_SYNC","MAP_TYPE","MapArea","MapFlags","MapPermission","MapRangeDict","MapType","MemorySet","R","U","W","X","__private_field","activate","all","all","areas","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","complement","complement","contains","contains","contains_valid_buffer","copy_data","copy_on_write","data_frames","data_frames","deref","difference","difference","do_page_fault","ebss","edata","ekernel","empty","empty","eq","eq","eq","erodata","etext","expand_to","extend","extend","file_ref","find_mmap_area_end","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_another","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_elf","from_existed_user","from_iter","from_iter","get","hash","hash","heap_area_idx","insert","insert","insert","insert_framed_area","insert_program_area","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","is_all","is_all","is_empty","is_empty","kernel_token","map","map_file","map_from_existed_page_table","map_from_kernel_elf_area","map_one","map_perm","map_signaltrampoline","map_trampoline","map_type","mmap","munmap","ne","ne","new","new","new_bare","new_kernel","not","not","page_table","partial_cmp","partial_cmp","push","push_no_alloc","push_with_offset","recycle_data_pages","remap_test","remove","remove","remove","remove_area_with_start_vpn","sbrk","sbss_with_stack","sdata","set","set","set_end","set_pte_flags","shrink_to","srodata","ssignaltrampoline","stext","strampoline","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","token","translate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","unmap","unmap_one","vpn_range","A","D","G","PTEFlags","PageTable","PageTableEntry","R","U","UserBuffer","UserBufferIterator","V","W","X","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffers","buffers","clear","clone","clone","clone_into","clone_into","cmp","complement","contains","copy_from_user","copy_from_user_array","copy_to_user","copy_to_user_array","copy_to_user_string","current_buffer","current_idx","difference","empty","empty","eq","executable","extend","find_pte","find_pte_create","find_pte_refmut","flags","fmt","fmt","fmt","fmt","fmt","frames","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_token","hash","index","index_mut","insert","intersection","intersects","into","into","into","into","into","into_iter","into_iter","is_all","is_dirty","is_empty","is_mapped","is_valid","len","len","map","ne","new","new","new","next","not","partial_cmp","ppn","read","readable","remove","root_ppn","set","set_permission","set_pte_flags","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","token","translate","translate_refmut","translate_va","translated_byte_buffer","translated_byte_buffer_append_to_existed_vec","translated_ref","translated_refmut","translated_str","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","unmap","writable","write","write_at","SBI_CLEAR_IPI","SBI_CONSOLE_GETCHAR","SBI_CONSOLE_PUTCHAR","SBI_REMOTE_FENCE_I","SBI_REMOTE_SFENCE_VMA","SBI_REMOTE_SFENCE_VMA_ASID","SBI_SEND_IPI","SBI_SET_TIMER","SBI_SHUTDOWN","console_getchar","console_putchar","sbi_call","set_timer","shutdown","SYSCALL_BRK","SYSCALL_CHDIR","SYSCALL_CLEAR","SYSCALL_CLOCK_GETTIME","SYSCALL_CLONE","SYSCALL_CLOSE","SYSCALL_DUP","SYSCALL_DUP3","SYSCALL_EXECVE","SYSCALL_EXIT","SYSCALL_EXIT_GRUOP","SYSCALL_FACCESSAT","SYSCALL_FACCESSAT2","SYSCALL_FCNTL","SYSCALL_FSTAT","SYSCALL_FSTATAT","SYSCALL_FSYNC","SYSCALL_GETCWD","SYSCALL_GETDENTS64","SYSCALL_GETEGID","SYSCALL_GETEUID","SYSCALL_GETGID","SYSCALL_GETITIMER","SYSCALL_GETPGID","SYSCALL_GETPID","SYSCALL_GETPPID","SYSCALL_GETRUSAGE","SYSCALL_GETTID","SYSCALL_GETUID","SYSCALL_GET_TIME","SYSCALL_GET_TIME_OF_DAY","SYSCALL_IOCTL","SYSCALL_KILL","SYSCALL_LINKAT","SYSCALL_LS","SYSCALL_LSEEK","SYSCALL_MKDIRAT","SYSCALL_MMAP","SYSCALL_MOUNT","SYSCALL_MPROTECT","SYSCALL_MUNMAP","SYSCALL_NANOSLEEP","SYSCALL_OPEN","SYSCALL_OPENAT","SYSCALL_PIPE2","SYSCALL_PPOLL","SYSCALL_PRLIMIT","SYSCALL_PSELECT6","SYSCALL_READ","SYSCALL_READLINKAT","SYSCALL_READV","SYSCALL_RENAMEAT2","SYSCALL_SBRK","SYSCALL_SENDFILE","SYSCALL_SETITIMER","SYSCALL_SETPGID","SYSCALL_SET_TID_ADDRESS","SYSCALL_SHUTDOWN","SYSCALL_SIGACTION","SYSCALL_SIGPROCMASK","SYSCALL_SIGRETURN","SYSCALL_SYSINFO","SYSCALL_SYSLOG","SYSCALL_TIMES","SYSCALL_UMASK","SYSCALL_UMOUNT2","SYSCALL_UNAME","SYSCALL_UNLINKAT","SYSCALL_UTIMENSAT","SYSCALL_WAIT4","SYSCALL_WRITE","SYSCALL_WRITEV","SYSCALL_YIELD","errno","fs","process","syscall","syscall_name","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EADV","EAFNOSUPPORT","EAGAIN","EALREADY","EBADE","EBADF","EBADFD","EBADMSG","EBADR","EBADRQC","EBADSLT","EBFONT","EBUSY","ECANCELED","ECHILD","ECHRNG","ECOMM","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDEADLOCK","EDESTADDRREQ","EDOM","EDOTDOT","EDQUOT","EEXIST","EFAULT","EFBIG","EHOSTDOWN","EHOSTUNREACH","EHWPOISON","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","EISNAM","EKEYEXPIRED","EKEYREJECTED","EKEYREVOKED","EL2HLT","EL2NSYNC","EL3HLT","EL3RST","ELIBACC","ELIBBAD","ELIBEXEC","ELIBMAX","ELIBSCN","ELNRNG","ELOOP","EMEDIUMTYPE","EMFILE","EMLINK","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENAVAIL","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOANO","ENOBUFS","ENOCSI","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOKEY","ENOLCK","ENOLINK","ENOMEDIUM","ENOMEM","ENOMSG","ENONET","ENOPKG","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTNAM","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENOTUNIQ","ENXIO","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERANGE","EREMCHG","EREMOTE","EREMOTEIO","ERESTART","ERFKILL","EROFS","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESRMNT","ESTALE","ESTRPIPE","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","EUCLEAN","EUNATCH","EUSERS","EWOULDBLOCK","EXDEV","EXFULL","SUCCESS","ADD_SEALS","AT_EACCESS","AT_EMPTY_PATH","AT_FDCWD","AT_NO_AUTOMOUNT","AT_REMOVEDIR","AT_SYMLINK_NOFOLLOW","AT_SYMLINK_NOFOLLOW","AT_SYMLINK_NOFOLLOW","CANCELLK","Command","DUPFD","DUPFD_CLOEXEC","F_OK","FaccessatFlags","FaccessatMode","FstatatFlags","GETFD","GETFL","GETLEASE","GETLK","GETOWN","GETOWNER_UIDS","GETOWN_EX","GETPIPE_SZ","GETSIG","GET_FILE_RW_HINT","GET_RW_HINT","GET_SEALS","ILLEAGAL","IOVec","MNT_DETACH","MNT_EXPIRE","MNT_FORCE","MS_ACTIVE","MS_BIND","MS_BORN","MS_DIRSYNC","MS_I_VERSION","MS_KERNMOUNT","MS_LAZYTIME","MS_MANDLOCK","MS_MOVE","MS_NOATIME","MS_NODEV","MS_NODIRATIME","MS_NOEXEC","MS_NOREMOTELOCK","MS_NOSEC","MS_NOSUID","MS_NOUSER","MS_POSIXACL","MS_PRIVATE","MS_RDONLY","MS_REC","MS_RELATIME","MS_REMOUNT","MS_SHARED","MS_SILENT","MS_SLAVE","MS_STRICTATIME","MS_SYNCHRONOUS","MS_UNBINDABLE","MountFlags","NOTIFY","OFD_GETLK","OFD_SETLK","OFD_SETLKW","R_OK","SEEK_CUR","SEEK_END","SEEK_SET","SETFD","SETFL","SETLEASE","SETLK","SETLKW","SETOWN","SETOWN_EX","SETPIPE_SZ","SETSIG","SET_FILE_RW_HINT","SET_RW_HINT","SeekWhence","UMOUNT_NOFOLLOW","UmountFlags","UnlinkatFlags","UtimensatFlags","W_OK","X_OK","__openat","all","all","all","all","all","all","all","all","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","complement","complement","complement","complement","complement","complement","complement","complement","contains","contains","contains","contains","contains","contains","contains","contains","difference","difference","difference","difference","difference","difference","difference","difference","empty","empty","empty","empty","empty","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_primitive","hash","hash","hash","hash","hash","hash","hash","hash","insert","insert","insert","insert","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","iov_base","iov_len","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","ne","ne","ne","ne","ne","ne","ne","ne","not","not","not","not","not","not","not","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","remove","remove","remove","remove","remove","remove","remove","set","set","set","set","set","set","set","set","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","sys_chdir","sys_close","sys_dup","sys_dup3","sys_faccessat2","sys_fcntl","sys_fstat","sys_fstatat","sys_getcwd","sys_getdents64","sys_ioctl","sys_lseek","sys_mkdirat","sys_mount","sys_openat","sys_pipe2","sys_ppoll","sys_pselect","sys_read","sys_readlinkat","sys_readv","sys_sendfile","sys_umask","sys_umount2","sys_unlinkat","sys_utimensat","sys_write","sys_writev","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","toggle","toggle","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_primitive","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","union","union","union","union","union","AS","CLEAR","CLONE_CHILD_CLEARTID","CLONE_CHILD_SETTID","CLONE_DETACHED","CLONE_FILES","CLONE_FS","CLONE_IO","CLONE_NEWCGROUP","CLONE_NEWIPC","CLONE_NEWNET","CLONE_NEWNS","CLONE_NEWPID","CLONE_NEWUSER","CLONE_NEWUTS","CLONE_PARENT","CLONE_PARENT_SETTID","CLONE_PIDFD","CLONE_PTRACE","CLONE_SETTLS","CLONE_SIGHAND","CLONE_SYSVSEM","CLONE_THREAD","CLONE_UNTRACED","CLONE_VFORK","CLONE_VM","CLOSE","CONSOLE_LEVEL","CONSOLE_OFF","CONSOLE_ON","CORE","CPU","CloneFlags","DATA","FSIZE","ILLEAGAL","ILLEAGAL","LOCKS","MEMLOCK","MSGQUEUE","NICE","NLIMITS","NOFILE","NPROC","OPEN","READ","READ_ALL","READ_CLEAR","RLimit","RSS","RTPRIO","RTTIME","Resource","SIGPENDING","SIZE_BUFFER","SIZE_UNREAD","STACK","Sysinfo","SyslogAction","UTSName","WCONTINUED","WEXITED","WNOHANG","WNOWAIT","WSTOPPED","WaitOption","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bufferram","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","complement","complement","contains","contains","difference","difference","domainname","empty","empty","eq","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","freehigh","freeram","freeswap","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_primitive","from_primitive","hash","hash","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","is_all","is_all","is_empty","is_empty","loads","machine","mem_unit","ne","ne","nodename","not","not","partial_cmp","partial_cmp","procs","release","remove","remove","rlim_cur","rlim_max","set","set","sharedram","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","sys_brk","sys_clock_get_time","sys_clone","sys_execve","sys_exit","sys_get_time","sys_get_time_of_day","sys_getegid","sys_geteuid","sys_getgid","sys_getpgid","sys_getpid","sys_getppid","sys_getrusage","sys_gettid","sys_getuid","sys_kill","sys_mmap","sys_mprotect","sys_munmap","sys_nanosleep","sys_prlimit","sys_sbrk","sys_set_tid_address","sys_setitimer","sys_setpgid","sys_sigaction","sys_sigprocmask","sys_sigreturn","sys_sysinfo","sys_syslog","sys_times","sys_uname","sys_wait4","sys_yield","sysname","to_owned","to_owned","to_owned","to_owned","toggle","toggle","totalhigh","totalram","totalswap","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_primitive","try_from_primitive","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","uptime","version","AuxvEntry","AuxvType","BASE","BASE_PLATFORM","CLKTCK","DCACHEBSIZE","EGID","ELFInfo","ENTRY","EUID","EXECFD","EXECFN","FLAGS","FPUCW","GID","HWCAP","HWCAP2","ICACHEBSIZE","IGNORE","IGNOREPPC","INITPROC","L1D_CACHEGEOMETRY","L1D_CACHESHAPE","L1D_CACHESIZE","L1I_CACHEGEOMETRY","L1I_CACHESHAPE","L1I_CACHESIZE","L2_CACHEGEOMETRY","L2_CACHESHAPE","L2_CACHESIZE","L3_CACHEGEOMETRY","L3_CACHESHAPE","L3_CACHESIZE","MINSIGSTKSZ","NOTELF","NULL","PAGESZ","PHDR","PHENT","PHNUM","PLATFORM","RANDOM","SECURE","SYSINFO","SYSINFO_EHDR","UCACHEBSIZE","UID","__private_field","add_initproc","auxv_type","auxv_val","block_current_and_run_next","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","context","deref","entry","exit_current_and_run_next","from","from","from","from","into","into","into","into","manager","new","phdr","phent","phnum","pid","processor","signal","suspend_current_and_run_next","switch","task","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","TaskContext","borrow","borrow_mut","from","goto_trap_return","into","ra","s","try_from","try_into","type_id","TASK_MANAGER","TaskManager","WaitQueue","__private_field","add","add_interruptible","add_task","add_task","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","drop_interruptible","fetch","fetch_task","find_by_pid","find_task_by_pid","from","from","from","inner","interruptible_count","interruptible_queue","into","into","into","new","procs_count","ready_count","ready_queue","sleep_interruptible","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wake_all","wake_interruptible","0","KernelStack","PID_ALLOCATOR","PidAllocator","PidHandle","__private_field","alloc","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","current","dealloc","deref","drop","drop","from","from","from","from","get_top","into","into","into","into","kernel_stack_position","new","new","pid","pid_alloc","push_on_top","recycled","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","PROCESSOR","Processor","ProcessorInner","__private_field","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","current","current","current_task","current_trap_cx","current_user_token","deref","from","from","from","get_idle_task_cx_ptr2","idle_task_cx_ptr","inner","into","into","into","new","run","run_tasks","schedule","take_current","take_current_task","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","SA_INTERRUPT","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_RESTORER","SA_SIGINFO","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGKILL","SIGPIPE","SIGPROF","SIGPWR","SIGQUIT","SIGSEGV","SIGSTKFLT","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_HANDLER","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SigAction","SigActionFlags","SigActionHandler","SigInfo","SigMaskHow","Signals","all","all","all","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","complement","complement","contains","contains","contains","difference","difference","difference","do_signal","empty","empty","empty","eq","eq","eq","eq","extend","extend","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","from_primitive","from_signum","handler","hash","hash","hash","insert","insert","insert","intersection","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into","is_all","is_all","is_all","is_empty","is_empty","is_empty","mask","ne","ne","ne","new","new","not","not","not","partial_cmp","partial_cmp","partial_cmp","peek_front","remove","remove","remove","restorer","set","set","set","sigaction","signal_handler","signal_pending","sigprocmask","sub","sub","sub","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_signum","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from_primitive","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","__switch","FdTable","Interruptible","ProcAddress","ProcClock","Ready","Running","Rusage","TaskControlBlock","TaskControlBlockInner","TaskStatus","Zombie","acquire_inner_lock","add_signal","address","alloc_fd","alloc_fd_at","base_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","clear_child_tid","clock","clone","clone","clone_into","clone_into","elf_exec","eq","execve","exit_code","fd_table","fmt","fmt","fork","from","from","from","from","from","from","get_status","get_task_cx_ptr2","get_trap_cx","get_user_token","getpgid","getpid","heap_bottom","heap_pt","inner","into","into","into","into","into","into","is_zombie","kernel_stack","last_enter_s_mode","last_enter_u_mode","load_elf","memory_set","new","new","new","new","parent","pgid","pid","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","rusage","set_child_tid","setpgid","siginfo","sigmask","task_cx_ptr","task_status","timer","to_owned","to_owned","trap_cx_ppn","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update_itimer_prof_if_exists","update_itimer_real_if_exists","update_itimer_virtual_if_exists","update_process_times_enter_trap","update_process_times_leave_trap","working_dir","working_inode","ITimerVal","MSEC_PER_SEC","NSEC_PER_MSEC","NSEC_PER_SEC","NSEC_PER_USEC","TICKS_PER_SEC","TimeSpec","TimeVal","TimeZone","Times","USEC_PER_MSEC","USEC_PER_SEC","add","add","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","fmt","fmt","fmt","from","from","from","from","from","from_ms","from_ms","from_ns","from_s","from_s","from_tick","from_tick","from_us","from_us","get_time","get_time_ms","get_time_ns","get_time_sec","get_time_us","into","into","into","into","into","is_zero","is_zero","it_interval","it_value","new","new","new","now","now","set_next_trigger","sub","sub","tms_cstime","tms_cutime","tms_stime","tms_utime","to_ns","to_owned","to_owned","to_owned","to_owned","to_owned","to_tick","to_us","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","tv_nsec","tv_sec","tv_sec","tv_usec","type_id","type_id","type_id","type_id","type_id","tz_dsttime","tz_minuteswest","__alltraps","__call_sigreturn","__restore","context","enable_timer_interrupt","init","set_kernel_trap_entry","set_user_trap_entry","trap_from_kernel","trap_handler","trap_return","TrapContext","app_init_context","borrow","borrow_mut","clone","clone_into","fmt","from","into","kernel_satp","kernel_sp","sepc","set_sp","sstatus","to_owned","trap_handler","try_from","try_into","type_id","x"],"q":["os","","","","","","","","","","","","","","","","","","","","","","","os::board","","","","","os::config","","","","","","","","","","","","","","","os::console","","","","","","","","","","","","","","","","","","","","","","","os::drivers","","os::drivers::block","","","","","","","","","","","","","os::drivers::block::sdcardos::drivers::block::sdcard::InitError","","","os::drivers::block::virtio_blk","","","","","","","","","","","","","","","","","","","","","","","","","","","os::drivers::serial","os::drivers::serial::ns16550a","","","","","","","","","","","","","","","","os::drivers::serial::ns16550a::masks","","os::drivers::serial::ns16550a::offsets","","","","","","","","","os::fsos::fs::FileLike","","os::fs::cache_mgr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::fs::dev","","os::fs::dev::pseudo","","","","","","","","","","","","","","","","","","","","","","","","os::fs::dev::ttyos::fs::inode","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::fs::pipe","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::fs::poll","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::lang_items","","","","os::mm","","","","","","","","","os::mm::address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::mm::block_cache_block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::mm::block_cache_page","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::mm::elf_cache","","","","","","","","","","","","os::mm::frame_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::mm::heap_allocator","","","","","os::mm::memory_setos::mm::page_table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::sbi","","","","","","","","","","","","","","os::syscall","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::syscall::errno","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::syscall::fsos::syscall::processos::task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::context","","","","","","","","","","","os::task::manager","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::pid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::processor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::signalos::task::switch","os::task::task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::timer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::trap","","","","","","","","","","","os::trap::context","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","Convert user pointer trg to <code>Some(*trg)</code> or <code>None</code> if null.","","","Convert user pointer <code>trg:*const T</code> to <code>Some(trg as &amp; T)</code> or …","Convert user pointer <code>trg:*mut T</code> to <code>Some(trg as &amp;mut T)</code> or …","","","","Usage Example","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of blocks to erase (SDC) ","Initiate initialization process (SDC) ","","SD commands ","Software reset ","Read CID register ","Stop to read data ","Change R/W block size ","Read block ","Read multiple blocks ","Write a block ","Write multiple blocks ","Leading command for ACMD* ","Read OCR ","Enable/disable CRC check ","Check voltage range (SDC V2) ","Read CSD register ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Card Identification Data: CID Register","Card Specific Data: CSD Register","Card information","","CS value passed to SPI controller, this is a dummy value …","GPIOHS GPIO number to use for controlling the SD card CS …","Data token start byte, Start Multiple Block Read ","Data token start byte, Start Multiple Block Write ","Data token start byte, Start Single Block Read ","Data token start byte, Start Single Block Write ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Connect pins to internal functions ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Native Linux directory entry structure.","","File trait for regular and special files.","","","","","","","","","","","","","","","","","","","","","","","","","","","","block device","character device","directory","FIFO","symbolic link","bit mask for the file type bit field","regular file","socket","group has read permission","others have read permission","owner has read permission","group has read, write, and execute permission","others (not in group) have read, write,and execute …","owner has read, write, and execute permission","set-group-ID bit (see below)","set-user-ID bit (see execve(2))","sticky bit (see below)","group has write permission","others have write permission","owner has write permission","group has execute permission","others have execute permission","owner has execute permission","Store the file attributes from a supported file.","","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Inode number","The Filename (null-terminated)","Offset to next <code>linux_dirent</code>","Length of this <code>linux_dirent</code>","Type of the file","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","Get the inode number described in the <code>Stat</code>","Check whether the current file is hanged up and has …","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","Control the device file. manipulates the underlying device …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Read a buffer from the file into the kernel buffer.","Write to a buffer from the file into the kernel buffer.","","","","Offset to next <code>linux_dirent</code>","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","Check whether the current file is ready to be read.","","Do not check validity for simplicity Return (readable, …","Whether the file is inherently readable. Usually used as …","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","Backward compatibility. Used for time of last access.","Optimal block size for I/O.","Number 512-byte blocks allocated.","Time of last status change.","ID of device containing file","Group ID of the file’s group.","Inode number","File type and mode   ","Time of last modification.","Number of hard links","Device ID (if special file)","Size of file, in bytes.","User ID of the file’s owner.","Get the <code>Stat</code> for this file.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Check whether the current file is ready to be written to","Whether the file is inherently writable. Usually used as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Load a new BlockCache from disk.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Data Sink Data written to the <code>/dev/null</code> special files is …","Data Sink Data written to the <code>/dev/zero</code> special files is …","","","","","","","","","","Always return zero.","","","","","","","","","","","","","","","","","","","","","Cloexec","rustc using pipe and ioctl pipe file with this request id …","Non-cloexec","","","","","","","","","Read time","For struct termio Gets the current serial port settings.","Gets the current serial port settings.","Sets the serial port settings immediately.","Sets the serial port settings after flushing the input and …","Sets the serial port settings after allowing the input and …","Sets the serial port settings immediately.","Sets the serial port settings after flushing the input and …","Sets the serial port settings after allowing the input and …","Get the process group ID of the foreground process group …","Get window size.","Set the foreground process group ID of this terminal.","Set window size.","","","","","","The termios functions describe a general terminal …","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","terminal special characters.","control modes","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","input modes","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","local modes","","","Returns the complement of this set of flags.","ouput modes","","","","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If offset is not <code>None</code>, <code>kread()</code> will start reading file …","If offset is not <code>None</code>, <code>kwrite()</code> will start writing file …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return (read_end, write_end)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bitmap used by <code>pselect()</code> and <code>select</code> to indicate the event …","Implicitly polled for only. Error condition.","Implicitly polled for only. Hung up.","There is data to read.","Linux Extension.","Implicitly polled for only. Invalid polling request.","Writing now will not block.","There is urgent data to read.","Priority data may be read.","Linux Extension.","Normal data may be read.","Linux Extension.","Priority data may be written.","Writing now will not block.","Event types that can be polled for.","A scheduling  scheme  whereby  the  local  process  …","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","Clear a certain bit <code>d</code> to stop waiting for the event of the …","Clear the current struct.","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Return an empty bitmap for further manipulation","","Requested events","","File descriptor","Divide <code>d</code> by 64 to decide the <code>u64</code> in <code>bits</code> to visit.","Mod <code>d</code> by 64 for the position of <code>d</code> in the <code>fd_elt()</code> bitmap.","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Collect all fds with their bits set.","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Predicate for whether the bit is set for the <code>d</code>","","Returns the complement of this set of flags.","","<code>ppoll()</code> witout <code>sigmask</code>. See <code>ppoll</code> for more information.","Wait for one of the events in <code>poll_fd_p</code> to happen, or the …","Poll each of the file discriptors until certain events.","Removes the specified flags in-place.","Returned events","Inserts or removes the specified flags depending on the …","","The total number of set bits.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","Definitions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","just hold all pages alloced","","<em><strong>If block_id is usize::Max</strong></em>, we assume it is an unused …","","","","","","","","","","","","","","","","Every time kernel tried to alloc this buffer this number …","","","","","","","","","","","","","","","PageCache is used for kernel. Each PageCache contains …","","","If block_id is usize::Max, content in this block won’t …","","","","","","","","","","","","","","","","","","","","","","!!! remember to connect oom with frame_allocator","","Priority is used for out of memory Every time kernel tried …","","","","","","","","","","","","","","","The static global struct to store the ELF MapAreas.","","","","","","","Push the elf area if found, or try to allocate space for …","","","The ELF vec garbage collector that consumes a …","","","","","","","","","","","","","","","","","","Deallocate a physical page","","Automatically recycle the physical frame when","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Initialize the heap for use at the beginning of kernel …","","","","","","","","","","","","","","","","","","","","","","Map area for different segments or a chunk of memory for …","","","","","The memory “space” as in user space or kernel space","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","The mapped area. Segments are implemented using this …","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","data: start-aligned but maybe with shorter length assume …","","","Range of the mapped virtual page numbers. Page aligned.","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","The REAL handler to page fault. Handles all types of page …","","","","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","If <code>new_end</code> is lower than the current end of heap area, do …","","","Return the reference count to the currently using file if …","","","","","","","","","","","","","","","","","","","","Copier, but the physical pages are not allocated, thus …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Include sections in elf and trampoline and TrapContext and …","","","","Warning","","","The pointer to store the heap area in order to ease the …","Warning","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Insert an anonymous segment containing the space between …","Insert an anonymous segment containing the space between …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","Map &amp; allocate all virtual pages in current area to …","","Map the same area in <code>self</code> from <code>dst_page_table</code> to …","Map vpns in <code>self</code> to the same ppns in <code>kernel_elf_area</code> from …","Map an included page in current area. If the <code>map_type</code> is …","Permissions which are the or of RWXU, where U stands for …","Can be accessed in user mode.","Mention that trampoline is not collected by areas.","Direct or framed(virtual) mapping?","","Still have so much to do with this function.","","","","Construct a new segment without without allocating memory","Create a new struct with no information at all.","Create an empty kernel space. Without kernel stacks. (Is …","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","Push a not-yet-mapped map_area into current MemorySet and …","Push the map area into the memory set without copying or …","","","","Warning","Removes the specified flags in-place.","Removes the specified flags in-place.","Warning","","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","unchecked, caller should ensure <code>new_vpn_end</code> is valid","","If <code>new_end</code> is higher than the current end of heap area, do …","","","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Getter to the token of current memory space, or “this” …","Translate the <code>vpn</code> into its corresponding …","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Unmap all pages in <code>self</code> from <code>page_table</code> using unmap_one()","Unmap a page in current area. If it is framed, then the …","","","Dirty Bit, true if it is modified.","","Page Table Entry flags","","Page Table Entry","Readable Bit","User Space Bit, true if it can be accessed from user space.","A buffer in user space. Kernel space code may use this …","Iterator to a UserBuffer returning u8","Valid Bit","Writable Bit","Executable Bit","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","The segmented array, or, a “vector of vectors”.","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Copy <code>*src: T</code> to kernel space. <code>src</code> is a pointer in user …","Copy array <code>*src: [T;len]</code> to kernel space. <code>src</code> is a pointer …","Copy <code>*src: T</code> to user space. <code>src</code> is a pointer in kernel …","Copy array <code>*src: [T;len]</code> to user space. <code>src</code> is a pointer …","Automatically add <code>&#39;\\\\0&#39;</code> in the end, so total written length …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","Find the page table entry denoted by vpn, returning Some(&amp;_…","Find the page in the page table, creating the page on the …","Find and return reference the page table entry denoted by …","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Create an empty page table from <code>satp</code>","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","Returns <code>true</code> if all flags are currently set.","","Returns <code>true</code> if no flags are currently stored.","Predicate for the valid bit.","","","The total size of the Userbuffer.","Map the <code>vpn</code> to <code>ppn</code> with the <code>flags</code>.","","","","","","Returns the complement of this set of flags.","","","","","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","Return the physical token to current page.","Translate the <code>vpn</code> into its corresponding …","","Translate the virtual address into its corresponding …","","if <code>existed_vec == None</code>, a empty <code>Vec</code> will be created.","Translate the user space pointer <code>ptr</code> into a reference in …","Translate the user space pointer <code>ptr</code> into a mutable …","Load a string from other address spaces into kernel space …","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Unmap the <code>vpn</code> to <code>ppn</code> with the <code>flags</code>.","","","Write to <code>self</code> starting at <code>offset</code>, and return written bytes.","","","","","","","","","","","","<code>ecall</code> wrapper to switch trap into S level.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Argument list too long","Permission denied","Address already in use","Cannot assign requested address","Advertise error","Address family not supported by protocol","Try again","Operation already in progress","Invalid exchange","Bad file number","File descriptor in bad state","Not a data message","Invalid request descriptor","Invalid request code","Invalid slot","Bad font file format","Device or resource busy","Operation Canceled","No child processes","Channel number out of range","Communication error on send","Software caused connection abort","Connection refused","Connection reset by peer","Resource deadlock would occur","Resource deadlock would occur","Destination address required","Math argument out of domain of func","RFS specific error","Quota exceeded","File exists","Bad address","File too large","Host is down","No route to host","Memory page has hardware error","Identifier removed","Illegal byte sequence","Operation now in progress","Interrupted system call","Invalid argument","I/O error","Transport endpoint is already connected","Is a directory","Is a named type file","Key has expired","Key was rejected by service","Key has been revoked","Level 2 halted","Level 2 not synchronized","Level 3 halted","Level 3 reset","Can not access a needed shared library","Accessing a corrupted shared library","Cannot exec a shared library directly","Attempting to link in too many shared libraries",".lib section in a.out corrupted","Link number out of range","Too many symbolic links encountered","Wrong medium type","Too many open files","Too many links","Message too long","Multihop attempted","File name too long","No XENIX semaphores available","Network is down","Network dropped connection because of reset","Network is unreachable","File table overflow","No anode","No buffer space available","No CSI structure available","No data available","No such device","No such file or directory","Exec format error","Required key not available","No record locks available","Link has been severed","No medium found","Out of memory","No message of desired type","Machine is not on the network","Package not installed","Protocol not available","No space left on device","Out of streams resources","Device not a stream","Invalid system call number","Block device required","Transport endpoint is not connected","Not a directory","Directory not empty","Not a XENIX named type file","State not recoverable","Socket operation on non-socket","","Not a typewriter","Name not unique on network","No such device or address","Operation not supported on transport endpoint","Value too large for defined data type","Owner died (for robust mutexes)","Operation not permitted","Protocol family not supported","Broken pipe","Protocol error","Protocol not supported","Protocol wrong type for socket","Math result not representable","Remote address changed","Object is remote","Remote I/O error","Interrupted system call should be restarted","Operation not possible due to RF-kill","Read-only file system","Cannot send after transport endpoint shutdown","Socket type not supported","Illegal seek","No such process","Srmount error","Stale file handle","Streams pipe error","Timer expired","Connection timed out","Too many references: cannot splice","Text file busy","Structure needs cleaning","Protocol driver not attached","Too many users","Operation would block","Cross-device link","Exchange full","Success","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Warning","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","","","","","","","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","Warning","","","","","","If offset is not NULL, then it points to a variable …","umask() sets the calling process’s file mode creation …","","Warning","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","Explanation of Parameters","","","","","","","","","","","","","","","","","","","It can be used to both set and get the resource limits of …","","set pointer to thread ID This feature is currently NOT …","","","","Note: code translation should be done in syscall rather …","","","","Get process times","","If there is not a child process whose pid is same as …","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This function add a task to WaitQueue but <strong>won’t block it</strong>,","","","","","","","","","","","","","","","","","","","","","","","","","","This function add a task to interruptible_queue, but won’…","","","","","","","","","","This funtion will wake up all tasks in inner Vec and …","This function will drop task from interruptible_queue and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return (bottom, top) of a kernel stack in kernel space.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get current user token.","","","","","","","","","","","","","","","","","","","","","","","","","","Historical no-op.","Don’t send SIGCHLD when children stop.","Don’t create zombie on child death.","Don’t automatically block the signal when its handler is …","Use signal stack by using `sa_restorer’.","Reset to SIG_DFL on entry to handler.","Restart syscall on signal return.","Use signal trampoline provided by C library’s wrapper …","Invoke signal-catching function with three arguments …","IOT instruction, abort() on a PDP-11.","Alarm clock.","Bus error.","Child terminated or stopped.","Continue.","Erroneous arithmetic operation.","Hangup.","Illegal instruction.","Interactive attention signal.","I/O now possible (4.2 BSD).","Killed.","Broken pipe.","Profiling timer expired.","","Quit.","Invalid access to storage.","","Stop, unblockable.","Bad system call.","Termination request.","Trace/breakpoint trap.","Keyboard stop.","Background read from control terminal.","Background write to control terminal.","Urgent data is available at a socket.","User-defined signal 1.","User-defined signal 2.","Virtual timer expired.","Window size change (4.3 BSD, Sun).","CPU time limit exceeded.","File size limit exceeded.","","Default action.","","Ignore signal.  ","","","","Bits in `sa_flags’ used to denote the default signal …","","","","Signal","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","if signum &gt; 64 (illeagal), return <code>Err()</code>, else return …","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Change the action taken by a process on receipt of a …","","","fetch and/or change the signal mask of the calling thread.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","Try to alloc the lowest valid fd in <code>fd_table</code>","Try to alloc fd at <code>hint</code>, if <code>hint</code> is allocated, will alloc …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","!!!!!!!!!!!!!!!!WARNING!!!!!!!!!!!!!!!!!!!!! Currently …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Traditional UNIX timespec structures represent elapsed …","Traditional UNIX timeval structures represent elapsed …","","Store the current process times used in the <code>time()</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return current time measured by ticks, which is NOT …","Return current time measured by ms.","Return current time measured by nano seconds.","Return current time measured by seconds.","Return current time measured by us.","","","","","","","","","","","","","","","Set next trigger.","","","system time of children","user time of children","system time","user time","","","","","","","","","","","","","","","","","","","The tv_usec member captures rest of the elapsed time, …","The tv_sec member represents the elapsed time, in whole …","The <code>tv_sec</code> member represents the elapsed time, in whole …","The <code>tv_nsec</code> member represents the rest of the elapsed time …","","","","","","","","","","","","","","","","","","","The trap cotext containing the user context and the …","","","","","","","","","Supervisor Address Translation and Protection","The current sp to be recovered on next entry into kernel …","Supervisor exception program counter.","","Privilege level of the trap context","","The pointer to trap_handler","","","","The registers to be preserved."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,2,2,1,2,1,2,0,2,0,0,1,2,1,2,1,2,1,0,0,0,3,0,3,3,3,3,3,0,3,3,3,0,4,5,5,6,0,5,5,5,5,5,5,5,5,5,5,5,5,5,7,8,8,9,9,7,10,10,7,8,8,8,8,8,8,8,8,8,8,9,0,8,6,6,8,8,8,6,0,8,8,6,6,6,6,8,8,8,6,8,6,8,8,0,0,0,0,0,0,0,0,0,0,0,10,10,0,8,8,8,8,8,8,8,8,11,9,4,5,7,8,6,10,11,9,4,5,7,8,6,10,11,5,7,8,6,10,5,7,8,6,10,9,11,9,5,5,7,8,6,10,9,4,5,7,8,6,10,11,9,9,9,9,9,9,0,9,4,5,7,8,6,10,11,0,9,9,4,4,9,9,9,9,9,5,7,8,6,10,9,4,5,7,8,6,10,11,9,4,5,7,8,6,10,11,9,4,5,7,8,6,10,11,4,9,9,12,13,12,14,0,0,0,15,14,15,14,15,15,14,15,14,15,14,14,14,15,14,15,14,15,0,0,0,0,14,0,0,16,16,16,16,16,16,0,16,0,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,17,18,0,0,0,18,0,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,17,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,21,21,21,19,20,19,20,19,20,19,20,19,20,19,20,19,20,19,20,19,20,18,22,17,19,20,23,21,18,22,17,19,20,23,21,0,22,18,22,17,19,20,23,21,18,22,17,19,20,23,21,19,20,19,20,19,20,23,23,23,23,23,0,19,20,19,20,18,19,20,19,20,22,19,19,19,19,19,20,20,20,20,20,23,21,18,22,17,19,20,23,21,19,20,19,20,19,20,19,20,22,21,24,19,20,0,19,20,19,20,19,20,18,22,17,19,20,23,21,24,19,20,19,20,24,24,19,20,22,23,21,19,20,19,20,0,0,24,24,19,24,19,20,19,20,22,21,21,21,21,21,21,21,21,21,21,21,21,21,24,19,20,19,20,19,20,18,22,17,19,20,23,21,19,20,18,22,17,19,20,23,21,18,22,17,19,20,23,21,18,22,17,19,20,23,21,19,20,24,24,24,25,26,0,0,0,0,0,0,0,0,0,0,0,0,27,27,28,29,30,30,30,31,32,30,33,34,35,31,32,28,29,27,30,33,34,35,31,32,28,29,27,30,27,27,28,29,30,33,34,35,27,27,30,33,34,35,31,32,28,29,27,0,33,34,35,0,30,30,30,33,34,35,31,32,28,29,27,33,33,30,30,31,32,30,33,34,35,31,32,30,31,32,33,33,30,27,30,33,34,35,31,32,28,29,27,34,35,30,33,34,35,31,32,28,29,27,30,33,34,35,31,32,28,29,27,0,0,0,0,0,36,37,36,37,36,37,36,37,36,37,36,37,36,37,36,37,36,37,36,37,36,37,38,38,38,38,38,38,38,38,39,39,39,38,38,38,39,38,0,38,38,39,39,39,39,39,39,39,39,39,39,39,39,39,38,0,0,0,0,0,0,38,40,38,38,38,38,38,38,38,38,38,41,40,42,43,39,44,38,41,40,42,43,39,44,38,44,44,42,44,38,42,44,38,38,38,38,41,42,43,44,40,38,38,39,38,38,39,38,38,38,38,38,41,41,40,42,43,39,39,44,38,38,38,38,38,39,38,44,43,38,38,38,41,40,42,43,39,44,38,43,38,38,44,43,41,44,44,38,38,44,44,38,43,43,43,38,38,38,38,38,41,42,44,38,38,41,40,42,43,39,44,38,39,41,40,42,43,39,44,38,41,40,42,43,39,44,38,38,43,41,43,43,42,42,42,42,18,0,0,0,18,0,0,0,45,46,47,48,45,46,47,48,45,46,48,47,47,45,46,47,48,45,46,47,47,47,47,48,47,48,45,46,47,47,47,0,47,47,48,47,0,47,0,47,47,47,47,47,47,47,47,48,45,46,47,48,45,46,47,48,45,46,47,47,47,49,49,49,0,0,0,0,50,50,50,50,50,51,50,49,51,50,49,51,49,49,50,49,51,50,49,51,50,51,50,49,0,50,51,51,50,50,51,51,51,50,50,50,50,49,51,50,49,51,50,49,51,50,49,51,51,51,51,50,50,51,0,52,52,52,52,52,52,52,52,52,52,52,52,52,0,0,52,53,53,52,52,52,52,52,52,53,52,52,54,52,53,54,52,53,54,52,54,52,53,53,52,52,52,52,52,53,52,54,52,54,53,53,54,52,52,52,52,52,53,54,52,53,52,52,52,52,53,52,52,52,52,54,52,53,52,52,53,52,52,52,0,0,0,52,54,52,53,53,52,52,52,54,52,52,54,52,53,54,52,53,54,52,53,52,0,55,55,0,0,0,0,0,0,0,0,0,0,56,57,58,59,0,0,0,0,0,0,0,0,56,57,60,56,57,58,59,61,60,56,57,58,59,61,56,57,56,57,58,59,61,56,57,58,59,61,56,57,58,59,60,60,56,57,58,59,56,57,56,57,58,59,61,60,56,56,56,57,57,57,58,58,58,59,59,59,61,58,61,56,58,58,56,61,59,60,56,57,58,59,61,60,61,61,56,57,58,59,60,61,60,56,57,56,57,58,59,61,62,58,59,56,57,58,59,61,60,56,57,58,59,61,60,56,57,58,59,61,60,56,57,58,59,61,0,0,0,0,0,0,0,63,63,64,64,63,64,63,64,63,64,63,63,64,63,64,64,63,63,64,64,64,64,63,63,63,64,63,64,63,0,0,0,0,0,0,65,66,66,67,65,66,67,65,67,65,66,66,67,65,67,66,66,66,67,65,66,66,67,0,66,66,66,66,66,66,67,65,67,66,67,65,66,67,65,66,0,68,68,68,68,68,68,0,68,68,0,68,0,0,0,0,0,69,70,71,72,71,69,72,71,69,71,70,71,69,72,71,72,0,0,0,71,0,72,71,69,71,0,72,71,69,70,72,71,72,71,72,71,69,72,71,69,72,71,69,0,71,0,0,0,0,0,73,73,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,0,0,0,0,0,0,75,75,75,75,76,77,75,74,77,75,74,75,74,75,74,75,74,75,74,75,74,75,74,75,74,77,76,78,79,73,75,74,77,76,78,79,73,75,74,78,79,73,75,74,78,79,73,75,74,75,74,75,74,75,74,77,79,79,78,79,76,75,74,77,0,0,0,75,74,73,75,74,0,0,79,75,74,79,77,73,75,75,75,75,75,74,74,74,74,74,77,76,78,79,73,75,74,79,75,74,75,74,75,74,77,77,75,74,78,75,74,77,78,75,74,77,77,75,74,75,74,77,76,78,79,73,75,74,75,74,75,74,0,79,79,79,79,79,79,77,77,79,0,0,75,74,78,79,77,77,75,74,77,75,74,77,77,77,77,0,78,75,74,77,0,0,0,75,74,78,77,79,0,0,0,0,75,74,75,74,75,74,78,79,73,75,74,75,74,77,77,77,76,78,79,73,75,74,77,76,78,79,73,75,74,77,76,78,79,73,75,74,75,74,79,79,78,80,80,80,0,0,0,80,80,0,0,80,80,80,80,80,80,80,80,80,80,81,80,80,82,83,84,80,81,82,83,84,80,81,83,84,83,80,81,80,81,80,80,80,0,0,0,0,0,84,84,80,80,81,80,81,80,82,82,82,81,80,80,80,80,80,82,82,83,84,80,81,80,80,80,80,82,80,83,83,80,80,80,82,83,84,80,81,83,84,80,81,80,82,81,83,83,82,80,82,83,81,84,80,80,81,83,81,80,82,80,81,82,80,80,80,80,81,80,82,82,82,82,0,0,0,0,0,82,83,84,80,81,82,83,84,80,81,82,83,84,80,81,80,82,81,83,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,86,87,0,87,88,87,89,86,85,0,85,85,90,0,0,0,85,85,85,85,85,85,85,85,85,85,85,85,85,0,91,91,91,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,0,85,85,85,85,90,93,93,93,85,85,85,85,85,85,85,85,85,85,85,0,91,0,0,0,90,90,0,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,94,87,88,91,92,89,85,90,86,93,94,87,88,91,92,89,85,90,86,93,94,87,88,91,92,89,90,86,93,94,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,85,90,86,93,87,88,91,92,89,90,86,93,93,93,93,93,87,87,87,87,87,88,88,88,88,88,91,91,91,91,91,92,92,92,92,92,89,89,89,89,89,85,90,90,90,90,90,86,86,86,86,86,93,94,87,88,91,92,89,85,85,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,85,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,94,87,88,91,92,89,85,90,86,94,94,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,94,87,88,91,92,89,90,86,93,87,88,91,92,89,90,86,93,94,87,88,91,92,89,85,90,86,85,93,94,87,88,91,92,89,85,90,86,93,94,87,88,91,92,89,85,90,86,93,87,88,91,92,89,90,86,95,96,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,96,96,96,96,95,95,0,95,95,96,95,95,95,95,95,95,95,95,96,96,96,96,0,95,95,95,0,95,96,96,95,0,0,0,98,98,98,98,98,0,97,98,97,98,97,98,97,98,97,98,97,98,97,98,97,98,97,98,99,96,100,97,98,101,95,99,96,100,97,98,101,95,100,100,97,98,101,100,97,98,101,97,98,97,98,97,98,97,98,99,97,98,96,97,98,95,97,98,96,100,97,97,97,97,97,98,98,98,98,98,101,95,100,100,100,99,96,96,100,97,98,101,95,95,97,98,97,98,97,98,97,98,96,95,97,98,97,98,97,98,97,98,99,96,100,97,98,101,95,97,98,97,98,100,99,100,97,98,99,97,98,97,98,100,99,97,98,101,101,97,98,100,97,98,97,98,97,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,100,97,98,101,97,98,100,100,100,99,96,100,97,98,101,95,96,95,99,96,100,97,98,101,95,99,96,100,97,98,101,95,97,98,100,99,0,0,102,102,102,102,102,0,102,102,102,102,102,102,102,102,102,102,102,102,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,103,0,104,104,0,105,103,102,104,105,103,102,104,102,104,102,104,0,103,105,0,105,103,102,104,105,103,102,104,0,104,105,105,105,0,0,0,0,0,0,102,104,105,103,102,104,105,103,102,104,105,103,102,104,0,106,106,106,106,106,106,106,106,106,106,0,0,0,107,108,108,0,109,108,109,107,108,109,107,107,108,108,0,108,0,108,109,107,109,108,108,108,109,107,108,0,108,108,0,108,109,107,108,109,107,108,109,107,109,0,110,0,0,0,0,111,112,112,110,113,111,112,110,113,111,112,112,111,110,113,112,110,113,111,113,112,110,113,111,0,112,113,113,0,113,112,112,110,113,111,112,110,113,111,112,110,113,111,0,0,0,114,115,116,114,115,116,114,115,116,0,0,0,114,115,116,114,115,116,115,115,116,114,115,115,0,0,115,0,115,116,114,115,116,114,115,116,114,117,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,120,120,120,119,119,0,0,0,0,0,0,118,117,119,118,117,119,118,117,119,118,117,119,118,117,119,118,117,119,118,117,119,118,117,119,118,117,119,118,117,120,121,122,119,118,117,120,121,122,119,118,117,120,121,122,119,118,117,120,121,122,119,118,117,119,118,117,119,118,117,119,118,117,119,0,118,117,119,118,117,120,119,118,117,119,121,118,118,118,118,118,117,117,117,117,117,120,121,122,119,119,119,119,119,118,117,120,120,121,122,119,118,117,119,118,117,119,118,117,119,118,117,119,120,118,121,118,117,119,118,117,119,118,117,119,118,117,119,118,117,120,121,122,119,118,117,119,118,117,119,121,118,117,119,121,122,118,117,119,118,117,119,118,118,117,119,121,118,117,119,0,122,122,0,118,117,119,118,117,119,118,117,119,118,117,120,121,122,119,118,118,117,119,118,117,120,121,122,119,120,118,117,120,121,122,119,118,117,120,121,122,119,118,117,119,0,0,123,0,0,123,123,0,0,0,0,123,124,125,125,125,125,125,124,125,126,127,128,123,124,125,126,127,128,123,125,127,125,128,123,128,123,0,123,0,125,125,128,123,124,124,125,126,127,128,123,125,125,125,125,124,124,125,125,124,124,125,126,127,128,123,125,124,126,126,124,125,124,126,127,128,125,125,124,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,125,127,124,125,125,125,125,125,128,123,125,124,125,126,127,128,123,124,125,126,127,128,123,124,125,126,127,128,123,125,125,125,125,125,125,125,0,0,0,0,0,0,0,0,0,0,0,0,129,130,129,130,131,132,133,129,130,131,132,133,129,130,131,132,133,129,130,131,132,133,129,130,132,129,130,131,132,133,129,130,129,129,130,129,130,129,130,0,0,0,0,0,129,130,131,132,133,129,130,132,132,129,130,132,129,130,0,129,130,133,133,133,133,129,129,130,131,132,133,130,130,129,130,131,132,133,129,130,131,132,133,129,129,130,130,129,130,131,132,133,131,131,0,0,0,0,0,0,0,0,0,0,0,0,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134],"f":[null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["never",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["metadata",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[["level",4]],["u8",15]],[[["record",3]]],[[]],[[["arguments",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["str",15]],["result",6]],null,null,null,null,[[]],[[]],[[]],[[],["arc",3]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cmd",4]],[[],["initerror",4]],[[],["sdcardcsd",3]],[[],["sdcardcid",3]],[[],["sdcardinfo",3]],[[]],[[]],[[]],[[]],[[]],null,[[],["mutex",3]],[[]],[[["cmd",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["sdcardinfo",3]]]],[[],["result",4,[["sdcardcid",3]]]],[[],["result",4,[["sdcardcsd",3]]]],[[],["u8",15]],[[],["u8",15]],[[],["result",4,[["sdcardinfo",3],["initerror",4]]]],[[],["sdcard",3,[["spiimpl",3,[["spi0",3]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15],["u8",15]]],[[]],[[["usize",15]]],[[]],[[["u32",15]],["result",4]],[[["cmd",4],["u32",15],["u8",15]]],null,null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]]],[[]],[[["u32",15]],["result",4]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["mutex",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],["physaddr",3]],[[["physaddr",3],["usize",15]],["i32",15]],[[["physaddr",3]],["virtaddr",3]],[[["virtaddr",3]],["physaddr",3]],[[["usize",15]]],null,null,null,[[]],[[]],[[],["result",6]],[[]],[[]],null,[[["usize",15],["usize",15]]],null,[[],["result",6,[["u8",15]]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["u8",15]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["openflags",3]]],[[["statmode",3]]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["diskinodetype",4]],[[],["filedescriptor",3]],[[],["filelike",4]],[[],["openflags",3]],[[],["statmode",3]],[[],["dirent",3]],[[],["stat",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["openflags",3]],["ordering",4]],[[["statmode",3]],["ordering",4]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["diskinodetype",4]],["bool",15]],[[["openflags",3]],["bool",15]],[[["statmode",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["bool",15]],[[],["usize",15]],[[],["bool",15]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15],["usize",15]],["isize",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["option",4,[["usize",15]]]],["usize",15]],[[["option",4,[["usize",15]]]],["usize",15]],[[["openflags",3]],["bool",15]],[[["statmode",3]],["bool",15]],[[["bool",15],["filelike",4]]],[[["usize",15],["isize",15],["u8",15],["str",15]]],[[["u64",15],["u64",15],["u32",15],["u32",15],["u64",15],["i64",15],["i64",15],["i64",15],["i64",15]]],[[]],[[]],[[["openflags",3]],["option",4,[["ordering",4]]]],[[["statmode",3]],["option",4,[["ordering",4]]]],null,null,[[],["bool",15]],[[["userbuffer",3]],["usize",15]],[[]],[[],["bool",15]],[[]],[[]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["box",3,[["stat",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["userbuffer",3]],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],["usize",15]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["cachemode",4]],[[]],[[],["rwlock",3]],[[],["rwlock",3]],[[]],[[]],null,null,[[["cachemode",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["arc",3,[["blockdevice",8]]],["cachemode",4]],["arc",3,[["rwlock",3,[["blockcache",3]]]]]],[[["usize",15],["arc",3,[["blockdevice",8]]]],["arc",3,[["rwlock",3,[["blockcache",3]]]]]],[[["usize",15],["usize",15],["arc",3,[["blockdevice",8]]]],["arc",3,[["mutex",3]]]],[[["usize",15],["usize",15],["arc",3,[["blockdevice",8]]]],["arc",3,[["mutex",3]]]],[[["usize",15],["arc",3,[["blockdevice",8]]],["cachemode",4]],["arc",3,[["rwlock",3,[["blockcache",3]]]]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["arc",3,[["blockdevice",8]]]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["option",4,[["arc",3,[["rwlock",3,[["blockcache",3]]]]]]]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15],["usize",15]],["option",4,[["arc",3,[["mutex",3]]]]]],[[["usize",15],["usize",15]],["option",4,[["arc",3,[["mutex",3]]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["userbuffer",3]],["usize",15]],[[["userbuffer",3]],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],[[],["bool",15]],[[["userbuffer",3]],["usize",15]],[[["userbuffer",3]],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["localmodes",3]]],[[]],[[],["u32",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["winsize",3]],[[],["termios",3]],[[],["localmodes",3]],[[]],[[]],[[]],[[["localmodes",3]],["ordering",4]],[[]],[[],["bool",15]],[[]],[[]],[[],["teletype",3]],[[]],[[],["arc",3]],[[]],[[]],[[["teletypecommand",4]],["bool",15]],[[["localmodes",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[]],[[]],null,null,[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15],["usize",15]],["isize",15]],[[],["bool",15]],[[],["bool",15]],null,[[["option",4,[["usize",15]]]],["usize",15]],null,null,null,[[["localmodes",3]],["bool",15]],[[]],null,null,[[["localmodes",3]],["option",4,[["ordering",4]]]],[[],["bool",15]],[[["userbuffer",3]],["usize",15]],[[],["bool",15]],[[]],[[["bool",15]]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["tryfromprimitiveerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["bool",15]],null,[[],["bool",15]],[[["userbuffer",3]],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["arc",3]],[[],["arc",3]],[[]],[[]],[[]],[[]],[[["usize",15]],["vec",3,[["dirent",3]]]],[[],["u32",15]],[[],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[["option",4,[["usize",15]]]],["usize",15]],[[["option",4,[["usize",15]]]],["usize",15]],[[]],[[["isize",15],["seekwhence",3]],["isize",15]],[[["bool",15],["bool",15],["arc",3,[["directorytreenode",3]]]]],[[["arc",3,[["inode",3,[["datacachemgrwrapper",3],["infocachemgrwrapper",3]]]]]]],null,[[["arc",3],["str",15],["openflags",3],["diskinodetype",4]],["result",4,[["arc",3,[["osinode",3]]],["isize",15]]]],[[["str",15],["openflags",3],["diskinodetype",4]],["result",4,[["arc",3,[["osinode",3]]],["isize",15]]]],[[],["arc",3,[["osinode",3]]]],[[["userbuffer",3]],["usize",15]],[[],["bool",15]],null,[[["usize",15]]],[[["option",4,[["usize",15]]],["option",4,[["usize",15]]],["option",4,[["usize",15]]]]],[[],["usize",15]],[[],["box",3,[["stat",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],null,[[["userbuffer",3]],["usize",15]],null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],null,[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["ringbufferstatus",4]],[[]],null,[[["ringbufferstatus",4]],["bool",15]],[[]],[[]],[[]],[[],["bool",15]],null,[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["userbuffer",3]],["usize",15]],[[],["u8",15]],null,[[["arc",3,[["mutex",3,[["piperingbuffer",3]]]]]]],[[],["bool",15]],null,[[["arc",3]]],[[["arc",3]]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],[[],["bool",15]],null,[[["userbuffer",3]],["usize",15]],[[["u8",15]]],null,[[["arc",3,[["mutex",3,[["piperingbuffer",3]]]]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[["pollevent",3]]],[[]],[[],["u16",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pollfd",3]],[[],["pollevent",3]],[[]],[[]],[[["usize",15]]],[[]],[[["pollevent",3]],["ordering",4]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[["pollevent",3]],["bool",15]],null,[[["intoiterator",8]]],null,[[["usize",15]],["usize",15]],[[["usize",15]],["u64",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u16",15]],["option",4]],[[["u16",15]]],[[["u16",15]]],[[["intoiterator",8]]],[[],["vec",3,[["usize",15]]]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["bool",15]],[[["pollevent",3]],["bool",15]],[[]],[[["pollevent",3]],["option",4,[["ordering",4]]]],[[["usize",15],["usize",15],["usize",15]],["isize",15]],[[["usize",15],["usize",15],["usize",15]],["isize",15]],[[["usize",15],["option",4,[["fdset",3]]],["option",4,[["fdset",3]]],["option",4,[["fdset",3]]],["option",4,[["timespec",3]]]],["isize",15]],[[]],null,[[["bool",15]]],[[["usize",15]]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["panicinfo",3]],["never",15]],null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["physpagenum",3]],[[],["virtpagenum",3]],[[],["physaddr",3]],[[],["virtaddr",3]],[[],["physpagenum",3]],[[],["virtpagenum",3]],[[],["simplerange",3]],[[]],[[]],[[]],[[]],[[]],[[["physaddr",3]],["ordering",4]],[[["virtaddr",3]],["ordering",4]],[[["physpagenum",3]],["ordering",4]],[[["virtpagenum",3]],["ordering",4]],null,null,[[["physaddr",3]],["bool",15]],[[["virtaddr",3]],["bool",15]],[[["physpagenum",3]],["bool",15]],[[["virtpagenum",3]],["bool",15]],[[],["physpagenum",3]],[[],["virtpagenum",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["usize",15]]],[[["physpagenum",3]]],[[["usize",15]]],[[]],[[["virtpagenum",3]]],[[["usize",15]]],[[["physaddr",3]]],[[]],[[]],[[["usize",15]]],[[["virtaddr",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["physaddr",3]],["bool",15]],[[["virtaddr",3]],["bool",15]],[[["physpagenum",3]],["bool",15]],[[["virtpagenum",3]],["bool",15]],[[]],[[]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[["physaddr",3]],["option",4,[["ordering",4]]]],[[["virtaddr",3]],["option",4,[["ordering",4]]]],[[["physpagenum",3]],["option",4,[["ordering",4]]]],[[["virtpagenum",3]],["option",4,[["ordering",4]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[],["arc",3,[["mutex",3,[["buffercache",3]]]]]],null,[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[["usize",15],["usize",15],["arc",3,[["blockdevice",8]]]],["arc",3,[["mutex",3]]]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],null,[[["usize",15]]],[[["usize",15],["arc",3,[["blockdevice",8]]]]],[[],["result",4]],[[],["result",4]],[[["usize",15],["usize",15]],["option",4,[["arc",3,[["mutex",3]]]]]],[[["usize",15],["usize",15]],["option",4,[["arc",3,[["mutex",3,[["buffercache",3]]]]]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["arc",3]],[[]],[[]],[[]],[[]],[[["usize",15],["usize",15],["arc",3,[["blockdevice",8]]]],["arc",3,[["mutex",3]]]],[[],["physpagenum",3]],[[],["pagetableentry",3]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],null,null,[[["usize",15]]],[[["vec",3,[["usize",15]]],["arc",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15],["usize",15]],["option",4,[["arc",3,[["mutex",3,[["pagecache",3]]]]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[],["rwlock",3]],[[]],[[]],[[["arc",3,[["osinode",3]]]],["result",6]],[[],["result",4]],[[],["result",4]],[[["rwlockreadguard",3,[["vec",3,[["maparea",3]]]]],["option",4,[["usize",15]]]]],[[],["typeid",3]],null,null,null,null,null,null,[[],["option",4,[["physpagenum",3]]]],[[],["option",4,[["physpagenum",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["physpagenum",3]]],[[["physpagenum",3]]],[[],["rwlock",3]],[[]],null,[[["formatter",3]],["result",6]],[[],["option",4,[["arc",3,[["frametracker",3]]]]]],[[]],[[["physpagenum",3]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["physpagenum",3],["physpagenum",3]]],[[]],[[]],[[]],[[]],[[]],[[["physpagenum",3]]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],[[],["usize",15]],null,null,[[["layout",3]],["never",15]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[["mappermission",3]]],[[["mapflags",3]]],[[]],[[]],[[],["u8",15]],[[],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["maprangedict",3]],[[],["maparea",3]],[[],["maptype",4]],[[],["mappermission",3]],[[],["mapflags",3]],[[]],[[]],[[]],[[]],[[]],[[["mappermission",3]],["ordering",4]],[[["mapflags",3]],["ordering",4]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["usize",15],["usize",15],["mappermission",3]],["bool",15]],[[["pagetable",3],["usize",15]]],[[["pagetable",3],["virtpagenum",3]],["result",6]],null,null,[[],["arc",3]],[[]],[[]],[[["virtaddr",3]],["result",6]],null,null,null,[[]],[[]],[[["maptype",4]],["bool",15]],[[["mappermission",3]],["bool",15]],[[["mapflags",3]],["bool",15]],null,null,[[["pagetable",3],["virtaddr",3]],["result",6]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["option",4,[["usize",15]]]],[[],["virtaddr",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["maparea",3]]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]]],[[["usize",15]]],[[["u8",15]]],[[["usize",15]]],[[]],[[["memoryset",3]],["memoryset",3]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["virtpagenum",3]],["option",4,[["arc",3]]]],[[]],[[]],null,[[["virtpagenum",3],["arc",3,[["frametracker",3]]]],["option",4,[["arc",3,[["frametracker",3]]]]]],[[]],[[]],[[["virtaddr",3],["virtaddr",3],["mappermission",3]]],[[["virtaddr",3],["virtaddr",3],["mappermission",3]],["option",4,[["maparea",3]]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[["pagetable",3]],["result",6]],null,[[["pagetable",3],["pagetable",3]],["result",6]],[[["pagetable",3],["virtpagenum",3]],["result",6]],[[["pagetable",3],["virtpagenum",3]],["result",6]],null,[[]],[[]],null,[[["usize",15],["usize",15],["mappermission",3],["mapflags",3],["usize",15],["usize",15]],["usize",15]],[[["usize",15],["usize",15]],["isize",15]],[[["mappermission",3]],["bool",15]],[[["mapflags",3]],["bool",15]],[[["simplerange",3,[["virtpagenum",3]]]]],[[["virtaddr",3],["virtaddr",3],["maptype",4],["mappermission",3],["option",4,[["filelike",4]]]]],[[]],[[]],[[]],[[]],null,[[["mappermission",3]],["option",4,[["ordering",4]]]],[[["mapflags",3]],["option",4,[["ordering",4]]]],[[["maparea",3],["option",4]],["result",6]],[[["maparea",3]],["result",6]],[[["maparea",3],["usize",15],["option",4]],["result",6]],[[]],[[]],[[["virtpagenum",3]],["option",4,[["arc",3,[["frametracker",3]]]]]],[[]],[[]],[[["virtpagenum",3]],["result",6]],[[["isize",15]],["usize",15]],null,null,[[["bool",15]]],[[["bool",15]]],[[["virtpagenum",3]]],[[["virtpagenum",3],["mappermission",3]],["result",6]],[[["pagetable",3],["virtaddr",3]],["result",6]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["virtpagenum",3]],["option",4,[["pagetableentry",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["pagetable",3]],["result",6]],[[["pagetable",3],["virtpagenum",3]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["pteflags",3]]],[[]],[[],["u8",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[],["pteflags",3]],[[],["pagetableentry",3]],[[]],[[]],[[["pteflags",3]],["ordering",4]],[[]],[[],["bool",15]],[[["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["str",15]]],null,null,[[]],[[]],[[]],[[["pteflags",3]],["bool",15]],[[],["bool",15]],[[["intoiterator",8]]],[[["virtpagenum",3]],["option",4,[["pagetableentry",3]]]],[[["virtpagenum",3]],["option",4,[["pagetableentry",3]]]],[[["virtpagenum",3]],["option",4,[["pagetableentry",3]]]],[[],["pteflags",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[["u8",15]],["option",4]],[[["u8",15]]],[[["u8",15]]],[[["intoiterator",8]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["virtpagenum",3]],["bool",15]],[[],["bool",15]],[[],["usize",15]],null,[[["virtpagenum",3],["physpagenum",3],["pteflags",3]]],[[["pteflags",3]],["bool",15]],[[]],[[["vec",3]]],[[["physpagenum",3],["pteflags",3]]],[[],["option",4]],[[]],[[["pteflags",3]],["option",4,[["ordering",4]]]],[[],["physpagenum",3]],[[],["usize",15]],[[],["bool",15]],[[]],null,[[["bool",15]]],[[["mappermission",3]]],[[["virtpagenum",3],["mappermission",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["virtpagenum",3]],["option",4,[["pagetableentry",3]]]],[[["virtpagenum",3]],["option",4,[["pagetableentry",3]]]],[[["virtaddr",3]],["option",4,[["physaddr",3]]]],[[["usize",15],["usize",15]],["vec",3]],[[["option",4,[["vec",3]]],["usize",15],["usize",15]],["vec",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["virtpagenum",3]]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]],["usize",15]],null,null,null,null,null,null,null,null,null,[[],["usize",15]],[[["usize",15]]],[[["usize",15],["usize",15],["usize",15],["usize",15]],["usize",15]],[[["usize",15]]],[[],["never",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],["isize",15]],[[["usize",15]],["str",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["str",15]],["result",4,[["arc",3,[["osinode",3]]],["isize",15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["seekwhence",3]]],[[["fstatatflags",3]]],[[["unlinkatflags",3]]],[[["umountflags",3]]],[[["mountflags",3]]],[[["utimensatflags",3]]],[[["faccessatmode",3]]],[[["faccessatflags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["usize",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["seekwhence",3]],[[],["iovec",3]],[[],["fstatatflags",3]],[[],["unlinkatflags",3]],[[],["umountflags",3]],[[],["mountflags",3]],[[],["utimensatflags",3]],[[],["faccessatmode",3]],[[],["faccessatflags",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["seekwhence",3]],["ordering",4]],[[["fstatatflags",3]],["ordering",4]],[[["unlinkatflags",3]],["ordering",4]],[[["umountflags",3]],["ordering",4]],[[["mountflags",3]],["ordering",4]],[[["utimensatflags",3]],["ordering",4]],[[["faccessatmode",3]],["ordering",4]],[[["faccessatflags",3]],["ordering",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["seekwhence",3]],["bool",15]],[[["fstatatflags",3]],["bool",15]],[[["unlinkatflags",3]],["bool",15]],[[["umountflags",3]],["bool",15]],[[["mountflags",3]],["bool",15]],[[["utimensatflags",3]],["bool",15]],[[["command",4]],["bool",15]],[[["faccessatmode",3]],["bool",15]],[[["faccessatflags",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["usize",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["usize",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["seekwhence",3]],["bool",15]],[[["fstatatflags",3]],["bool",15]],[[["unlinkatflags",3]],["bool",15]],[[["umountflags",3]],["bool",15]],[[["mountflags",3]],["bool",15]],[[["utimensatflags",3]],["bool",15]],[[["faccessatmode",3]],["bool",15]],[[["faccessatflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["seekwhence",3]],["option",4,[["ordering",4]]]],[[["fstatatflags",3]],["option",4,[["ordering",4]]]],[[["unlinkatflags",3]],["option",4,[["ordering",4]]]],[[["umountflags",3]],["option",4,[["ordering",4]]]],[[["mountflags",3]],["option",4,[["ordering",4]]]],[[["utimensatflags",3]],["option",4,[["ordering",4]]]],[[["faccessatmode",3]],["option",4,[["ordering",4]]]],[[["faccessatflags",3]],["option",4,[["ordering",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["isize",15]],[[["usize",15]],["isize",15]],[[["usize",15]],["isize",15]],[[["usize",15],["usize",15],["u32",15]],["isize",15]],[[["usize",15],["u32",15],["u32",15]],["isize",15]],[[["usize",15],["u32",15],["usize",15]],["isize",15]],[[["usize",15]],["isize",15]],[[["usize",15],["u32",15]],["isize",15]],[[["usize",15],["usize",15]],["isize",15]],[[["usize",15],["usize",15]],["isize",15]],[[["usize",15],["u32",15],["usize",15]],["isize",15]],[[["usize",15],["usize",15],["u32",15]],["isize",15]],[[["usize",15],["u32",15]],["isize",15]],[[["usize",15]],["isize",15]],[[["usize",15],["u32",15],["u32",15]],["isize",15]],[[["usize",15],["u32",15]],["isize",15]],[[["usize",15],["usize",15],["usize",15],["usize",15]],["isize",15]],[[["usize",15]],["isize",15]],[[["usize",15],["usize",15],["usize",15]],["isize",15]],[[["usize",15],["usize",15]],["isize",15]],[[["usize",15],["usize",15],["usize",15]],["isize",15]],[[["usize",15],["usize",15],["usize",15]],["isize",15]],[[["u32",15]],["isize",15]],[[["u32",15]],["isize",15]],[[["usize",15],["u32",15]],["isize",15]],[[["usize",15],["u32",15]],["isize",15]],[[["usize",15],["usize",15],["usize",15]],["isize",15]],[[["usize",15],["usize",15],["usize",15]],["isize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["tryfromprimitiveerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["cloneflags",3]]],[[["waitoption",3]]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["sysinfo",3]],[[],["cloneflags",3]],[[],["waitoption",3]],[[],["rlimit",3]],[[]],[[]],[[]],[[]],[[["cloneflags",3]],["ordering",4]],[[["waitoption",3]],["ordering",4]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],null,[[]],[[]],[[["syslogaction",4]],["bool",15]],[[["cloneflags",3]],["bool",15]],[[["waitoption",3]],["bool",15]],[[["resource",4]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,null,null,[[]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,[[["cloneflags",3]],["bool",15]],[[["waitoption",3]],["bool",15]],null,[[]],[[]],[[["cloneflags",3]],["option",4,[["ordering",4]]]],[[["waitoption",3]],["option",4,[["ordering",4]]]],null,null,[[]],[[]],null,null,[[["bool",15]]],[[["bool",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["isize",15]],[[["usize",15]],["isize",15]],[[["u32",15]],["isize",15]],[[],["isize",15]],[[["u32",15]],["never",15]],[[],["isize",15]],[[],["isize",15]],[[],["isize",15]],[[],["isize",15]],[[],["isize",15]],[[["usize",15]],["isize",15]],[[],["isize",15]],[[],["isize",15]],[[["isize",15]],["isize",15]],[[],["isize",15]],[[],["isize",15]],[[["usize",15],["usize",15]],["isize",15]],[[["usize",15],["usize",15],["usize",15],["usize",15],["usize",15],["usize",15]],["isize",15]],[[["usize",15],["usize",15],["usize",15]],["isize",15]],[[["usize",15],["usize",15]],["isize",15]],[[],["isize",15]],[[["usize",15],["u32",15]],["isize",15]],[[["isize",15]],["isize",15]],[[["usize",15]],["isize",15]],[[["usize",15]],["isize",15]],[[["usize",15],["usize",15]],["isize",15]],[[["usize",15],["usize",15],["usize",15]],["isize",15]],[[["u32",15],["usize",15],["usize",15]],["isize",15]],[[],["isize",15]],[[],["isize",15]],[[["u32",15],["u32",15]],["isize",15]],[[],["isize",15]],[[],["isize",15]],[[["isize",15],["u32",15]],["isize",15]],[[],["isize",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["tryfromprimitiveerror",3]]]],[[],["result",4,[["tryfromprimitiveerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["auxvtype",4]],[[],["auxventry",3]],[[]],[[]],null,[[],["arc",3]],null,[[["u32",15]],["never",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["auxvtype",4],["usize",15]]],null,null,null,null,null,null,[[]],null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[["arc",3,[["taskcontrolblock",3]]]]],[[["arc",3,[["taskcontrolblock",3]]]]],[[["arc",3,[["taskcontrolblock",3]]]]],[[["arc",3,[["taskcontrolblock",3]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mutex",3]],[[["arc",3,[["taskcontrolblock",3]]]]],[[],["option",4,[["arc",3,[["taskcontrolblock",3]]]]]],[[],["option",4,[["arc",3,[["taskcontrolblock",3]]]]]],[[["usize",15]],["option",4,[["arc",3,[["taskcontrolblock",3]]]]]],[[["usize",15]],["option",4,[["arc",3,[["taskcontrolblock",3]]]]]],[[]],[[]],[[]],null,[[],["u16",15]],null,[[]],[[]],[[]],[[]],[[],["u16",15]],[[],["u16",15]],null,[[["arc",3,[["taskcontrolblock",3]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["arc",3,[["taskcontrolblock",3]]]]],null,null,null,null,null,null,[[],["pidhandle",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["usize",15]]],[[],["mutex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[["pidhandle",3]]],null,[[],["pidhandle",3]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["arc",3,[["taskcontrolblock",3]]]]]],null,[[],["option",4,[["arc",3,[["taskcontrolblock",3]]]]]],[[],["trapcontext",3]],[[],["usize",15]],[[],["processor",3]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["arc",3,[["taskcontrolblock",3]]]]]],[[],["option",4,[["arc",3,[["taskcontrolblock",3]]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["signals",3]]],[[["sigactionflags",3]]],[[["sigmaskhow",3]]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["u32",15]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["signals",3]],[[],["sigactionflags",3]],[[],["sigactionhandler",4]],[[],["sigaction",3]],[[],["siginfo",3]],[[],["sigmaskhow",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["signals",3]],["ordering",4]],[[["sigactionflags",3]],["ordering",4]],[[["sigmaskhow",3]],["ordering",4]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["signals",3]],["bool",15]],[[["sigactionflags",3]],["bool",15]],[[["sigactionhandler",4]],["bool",15]],[[["sigmaskhow",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["u32",15]],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["u32",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[["usize",15]],["result",4,[["option",4,[["signals",3]]],["error",3]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["signals",3]],["bool",15]],[[["sigactionflags",3]],["bool",15]],[[["sigmaskhow",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[["signals",3]],["option",4,[["ordering",4]]]],[[["sigactionflags",3]],["option",4,[["ordering",4]]]],[[["sigmaskhow",3]],["option",4,[["ordering",4]]]],[[],["option",4,[["signals",3]]]],[[]],[[]],[[]],null,[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["usize",15]],["isize",15]],null,null,[[["u32",15]],["isize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["usize",15]]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["tryfromprimitiveerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["mutexguard",3,[["taskcontrolblockinner",3]]]],[[["signals",3]]],null,[[],["option",4,[["usize",15]]]],[[["usize",15]],["option",4,[["usize",15]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["rusage",3]],[[],["taskstatus",4]],[[]],[[]],[[["arc",3,[["osinode",3]]],["vec",3],["vec",3]],["isize",15]],[[["taskstatus",4]],["bool",15]],[[["string",3],["vec",3,[["string",3]]],["vec",3,[["string",3]]]],["isize",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["arc",3]],["arc",3,[["taskcontrolblock",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["taskstatus",4]],[[]],[[],["trapcontext",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,null,null,[[["vec",3],["vec",3]]],null,[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],["isize",15]],null,null,null,null,null,[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["timeval",3]]],[[["timeval",3]]],[[["timeval",3]]],[[]],[[["trap",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["timespec",3]],[[],["timeval",3]],[[],["timezone",3]],[[],["itimerval",3]],[[],["times",3]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["never",15]],[[],["never",15]],[[],["never",15]],null,[[["usize",15],["usize",15],["usize",15],["usize",15],["usize",15]]],[[]],[[]],[[],["trapcontext",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],null,null,null,[[["usize",15]]],null,[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null],"p":[[3,"KernelOutput"],[3,"Logger"],[3,"BLOCK_DEVICE"],[3,"SDCardWrapper"],[4,"CMD"],[3,"SDCardCID"],[4,"InitError"],[3,"SDCardCSD"],[3,"SDCard"],[3,"SDCardInfo"],[3,"PERIPHERALS"],[13,"CMDFailed"],[13,"CardCapacityStatusNotSet"],[3,"VirtIOBlock"],[3,"QUEUE_FRAMES"],[3,"Ns16550a"],[4,"FileLike"],[4,"DiskInodeType"],[3,"OpenFlags"],[3,"StatMode"],[3,"Stat"],[3,"FileDescriptor"],[3,"Dirent"],[8,"File"],[13,"Regular"],[13,"Abstract"],[4,"CacheMode"],[3,"DATA_BLOCK_CACHE_MANAGER"],[3,"INFO_CACHE_MANAGER"],[3,"BlockCache"],[3,"InfoBlockCacheWrapper"],[3,"DataBlockCacheWrapper"],[3,"BlockCacheManager"],[3,"InfoCacheMgrWrapper"],[3,"DataCacheMgrWrapper"],[3,"Zero"],[3,"Null"],[3,"LocalModes"],[4,"TeletypeCommand"],[3,"TTY"],[3,"TeletypeInner"],[3,"WinSize"],[3,"Teletype"],[3,"Termios"],[3,"FILE_SYSTEM"],[3,"ROOT"],[3,"OSInode"],[3,"DirectoryTreeNode"],[4,"RingBufferStatus"],[3,"PipeRingBuffer"],[3,"Pipe"],[3,"PollEvent"],[3,"FdSet"],[3,"PollFd"],[8,"Bytes"],[3,"PhysAddr"],[3,"VirtAddr"],[3,"PhysPageNum"],[3,"VirtPageNum"],[3,"SimpleRangeIterator"],[3,"SimpleRange"],[8,"StepByOne"],[3,"BlockCacheManager"],[3,"BufferCache"],[3,"PAGECACHE_MANAGER"],[3,"PageCache"],[3,"PageCacheManager"],[3,"ELF_CACHE"],[3,"FRAME_ALLOCATOR"],[8,"FrameAllocator"],[3,"StackFrameAllocator"],[3,"FrameTracker"],[4,"MapType"],[3,"MapFlags"],[3,"MapPermission"],[3,"KERNEL_SPACE"],[3,"MemorySet"],[3,"MapRangeDict"],[3,"MapArea"],[3,"PTEFlags"],[3,"PageTableEntry"],[3,"PageTable"],[3,"UserBuffer"],[3,"UserBufferIterator"],[4,"Command"],[3,"FaccessatFlags"],[3,"FstatatFlags"],[3,"UnlinkatFlags"],[3,"UtimensatFlags"],[3,"FaccessatMode"],[3,"UmountFlags"],[3,"MountFlags"],[3,"SeekWhence"],[3,"IOVec"],[4,"Resource"],[4,"SyslogAction"],[3,"CloneFlags"],[3,"WaitOption"],[3,"UTSName"],[3,"Sysinfo"],[3,"RLimit"],[4,"AuxvType"],[3,"INITPROC"],[3,"AuxvEntry"],[3,"ELFInfo"],[3,"TaskContext"],[3,"TASK_MANAGER"],[3,"TaskManager"],[3,"WaitQueue"],[3,"PidHandle"],[3,"PID_ALLOCATOR"],[3,"PidAllocator"],[3,"KernelStack"],[3,"PROCESSOR"],[3,"Processor"],[3,"ProcessorInner"],[3,"SigActionFlags"],[3,"Signals"],[3,"SigMaskHow"],[4,"SigActionHandler"],[3,"SigAction"],[3,"SigInfo"],[4,"TaskStatus"],[3,"TaskControlBlock"],[3,"TaskControlBlockInner"],[3,"ProcClock"],[3,"ProcAddress"],[3,"Rusage"],[3,"TimeSpec"],[3,"TimeVal"],[3,"TimeZone"],[3,"ITimerVal"],[3,"Times"],[3,"TrapContext"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};